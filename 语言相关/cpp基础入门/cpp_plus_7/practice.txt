5. 
    定义一个递归函数，接受一个整数参数，并返回该参数的阶乘。前面讲过，3的阶乘写作3!，等于3*2!，依此类推;而0!被定义为 1。
    通用的计算公式是，如果n大于零，则n!=n*(n−1)!。在程序中对 该函数进行测试，程序使用循环让用户输入不同的值，程序将报告这些 值的阶乘。
6.  
    编写一个程序，它使用下列函数:
    Fill_array( )将一个double数组的名称和长度作为参数。它提示用户 输入double值，并将这些值存储到数组中。当数组被填满或用户输入了 非数字时，输入将停止，并返回实际输入了多少个数字。
    Show_array( )将一个double数组的名称和长度作为参数，并显示该 数组的内容。
    Reverse-array( )将一个double数组的名称和长度作为参数，并将存 储在数组中的值的顺序反转。

10. Design a function calculate() that takes two type double values and a
    pointer to a function that takes two double arguments and returns a double.
    The calculate() function should also be type double, and it should return
    the value that the pointed-to function calculates, using the double
    arguments to calculate(). For example, suppose you have this definition for
    the add()function:

    double add(double x, double y)
    {
        return x + y;
    }

    Then, the function call in the following would cause calculate() to pass the
    values 2.5 and 10.4 to the add() function and then return the add() return
    value (12.9):

    double q = calculate(2.5, 10.4, add);

    Use these functions and at least one additional function in the add() mold
    in a program.The program should use a loop that allows the user to enter
    pairs of numbers. For each pair, use calculate() to invoke add() and at
    least one other function. If you are feeling adventurous, try creating an
    array of pointers to add()-style functions and use a loop to successively
    apply calculate() to a series of functions by using these pointers. Hint:
    Here’s how to declare such an array of three pointers:

    double (*pf[3])(double, double);

    You can initialize such an array by using the usual array initialization
    syntax and function names as addresses.')